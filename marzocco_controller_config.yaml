substitutions:
  device_name: espnew
  device_board: esp32dev
  flash_size: 16MB

<<: !include common/base.yaml

time:
  - platform: homeassistant
    id: ha_time

globals:
  - id: shot_timer_value
    type: std::string
    restore_value: no
    initial_value: '"Waiting for data…"' # Corrected initial value
  - id: last_update_time
    type: unsigned long
    restore_value: no
    initial_value: "0"

script:
  - id: prepare_for_sleep
    then:
      - deep_sleep.enter: deep_sleep_control # send esp32 to deep sleep:

# enable deep sleep capabilities and set wakeup-pin in energy-efficient ext1 mode
deep_sleep:
  id: deep_sleep_control
  esp32_ext1_wakeup: # uses much less deep sleep power than wakeup_pin:
    pins:
      - number: 35
        allow_other_uses: true
    mode: ALL_LOW

sensor:
  # handle voltage sensor
  - platform: adc
    pin: GPIO34
    id: power_voltage
    name: "Voltage"
    update_interval: 5s
    accuracy_decimals: 1
    attenuation: 12dB
    samples: 10
    filters:
      - multiply: 2.0
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3

  # Calculate battery percentage
  - platform: template
    id: battery_percentage
    name: "Battery Percentage"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: |-
      if (id(power_voltage).state <= 3.0) {
        return 0; // Below 3.0V, battery is considered empty
      } else if (id(power_voltage).state >= 4.2) {
        return 100; // Above 4.2V, battery is full
      } else {
        // Linear interpolation between 3.0V and 4.2V
        return (id(power_voltage).state - 3.0) / (4.2 - 3.0) * 100.0;
      }
    update_interval: 1s

switch:
  - platform: homeassistant
    id: micra_power
    entity_id: switch.xxxxxxx   # <--- ADD your MICRA/MINI serial
  - platform: homeassistant
    id: steam_boiler
    entity_id: switch.xxxxxxx_steam_boiler  # <--- ADD your MICRA/MINI serial

binary_sensor:
  - platform: gpio
    id: micra_power_switch
    name: "Micra Power Switch"
    pin:
      number: GPIO35
      inverted: true
      allow_other_uses: true

    on_click:
      then:
        - switch.toggle: micra_power
  - platform: gpio
    id: micra_steam_switch
    pin:
      number: GPIO0
      inverted: true
      mode: INPUT_PULLUP
    name: "Micra Steam Boiler Switch"
    on_click:
      then:
        - switch.toggle: steam_boiler
    # super long press (<3s) without need to release
    on_multi_click:
      - timing:
          - ON for at least 3.1s
        then:
          # invoke deep sleep
          - script.execute: prepare_for_sleep

text_sensor:
  - platform: homeassistant
    id: shot_timer_sensor
    entity_id: sensor.xxxxxxx_shot_timer    # <--- ADD your MICRA/MINI serial
    on_value:
      then:
        - lambda: |-
            id(shot_timer_value) = x;
            id(last_update_time) = millis();  // Record the current time in milliseconds
  - platform: homeassistant
    id: steam_boiler_state
    entity_id: switch.xxxxxxx_steam_boiler  # <--- ADD your MICRA/MINI serial
    name: "Steam Boiler State"
  - platform: homeassistant
    id: power_state
    entity_id: switch.xxxxxxxx     # <--- ADD your MICRA/MINI serial
    name: "Machine Power"
  - platform: homeassistant
    id: water_tank
    entity_id: binary_sensor.mr028356_water_tank_empty
    name: "Water Tank Refill"
  - platform: homeassistant
    id: coffee_temps
    entity_id: sensor.mr028356_current_coffee_temperature
    name: "Coffee Temp"

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    id: shottimer_display
    model: TTGO TDisplay 135x240
    update_interval: 1s
    auto_clear_enabled: true
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90
    lambda: |-
      // Clear the screen
      //it.fill(COLOR_BLACK);

      // Display the title
      //it.printf(10, 10, id(latoblackheader), WHITE, "La Marzocco Micra");
      // Display the fixed title at the top
      it.printf(it.get_width(), 0, id(latoblackheader), WHITE,TextAlign::TOP_RIGHT, "Micra Shot Timer");
      it.image(10, 42, id(my_image2));
      it.image(10, 0, id(my_image));
      if (id(power_state).state == "on") {
         it.image(20, 75, id(mach_on));
      }
      if (id(steam_boiler_state).state == "on") {
        it.image(50, 75, id(steam_on));
      }
      if (id(water_tank).state == "on") {
        it.image(95, 75, id(no_water));
        it.printf(120, 78, id(latoblack), BLUE, "Refill water tank");
      }

      //it.printf(20,20,id(lato),id(steam_boiler).state);

      // Align Battery Percentage to Bottom-Right
      int display_width = it.get_width();
      int display_height = it.get_height();
      int padding = 0; // Padding from the edge

      it.printf(display_width - padding, display_height - padding, id(latoblack), TextAlign::BOTTOM_RIGHT, "%d%%", (int)id(battery_percentage).state);


      // Convert shot_timer_value to an integer and add 1 second
      int seconds = atoi(id(shot_timer_value).c_str()) + 1;

      // Get the current time
      unsigned long current_time = millis();

      // Check if the timer has been updated in the last 5 seconds
      if (current_time - id(last_update_time) < 5000) {
        // Display the timer value in larger text below the title
        it.printf(130, 40, id(lato), GREEN, "%d sec", seconds);
      } else {
        // Display the ready message
        
        it.printf(130, 40, id(latoblackheader), ORANGE, "..ready!");
        if (id(power_state).state == "on") {
         
         float temp = atof(id(coffee_temps).state.c_str());
         it.printf(140, 30, id(latoblack),WHITE, "%.1f°C", temp);
        }
        
        
      }

image:
  - file: "image.png"
    id: my_image
    resize: 70x70
    type: RGB24
  - file: "marz.png"
    id: my_image2
    type: RGB24
    resize: 170x170
  - file: "power.png"
    id: mach_on
    type: RGB565
    resize: 20x20
  - file: "steam.png"
    id: steam_on
    type: RGB565
    resize: 20x20

font:
  - file:
      type: gfonts
      family: Lato
      weight: 400
    id: lato
    size: 30
  - file:
      type: gfonts
      family: Lato
      weight: 700
    id: latobold
    size: 24
  - file:
      type: gfonts
      family: Lato
      weight: 100
    id: latoblack
    size: 15
  - file:
      type: gfonts
      family: Lato
      weight: 400
    id: latoblackheader
    size: 18

color:
  - id: WHITE
    red: 100%
    green: 100%
    blue: 100%
    white: 100%
  - id: RED
    red: 100%
    green: 0%
    blue: 0%
    white: 0%
  - id: GREEN
    red: 0%
    green: 100%
    blue: 0%
    white: 0%
  - id: BLUE
    red: 0%
    green: 0%
    blue: 100%
    white: 0%
  - id: YELLOW
    red: 100%
    green: 100%
    blue: 0%
    white: 0%
  - id: ORANGE
    red: 100%
    green: 65%
    blue: 0%
    white: 0%
  - id: BLACK
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
